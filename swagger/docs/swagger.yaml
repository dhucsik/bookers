basePath: /api/v1
definitions:
  admin.createAuthorRequest:
    properties:
      name:
        type: string
    type: object
  admin.createBookRequest:
    properties:
      author_ids:
        items:
          type: integer
        type: array
      category_ids:
        items:
          type: integer
        type: array
      edition:
        type: integer
      language:
        type: string
      pub_date:
        type: string
      title:
        type: string
    type: object
  admin.createCategoryRequest:
    properties:
      name:
        type: string
    type: object
  admin.errorResponse:
    properties:
      message:
        type: string
    type: object
  auth.authRequest:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  auth.authResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  auth.errorResponse:
    properties:
      message:
        type: string
    type: object
  auth.refreshRequest:
    properties:
      token:
        type: string
    type: object
  authors.authorItemResponse:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  authors.errorResponse:
    properties:
      message:
        type: string
    type: object
  authors.listAuthorsResponse:
    properties:
      authors:
        items:
          $ref: '#/definitions/authors.authorItemResponse'
        type: array
    type: object
  books.authorResp:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  books.bookResponse:
    properties:
      authors:
        items:
          $ref: '#/definitions/books.authorResp'
        type: array
      categories:
        items:
          $ref: '#/definitions/books.categoryResp'
        type: array
      edition:
        type: integer
      id:
        type: integer
      language:
        type: string
      pub_date:
        type: string
      rating:
        type: number
      title:
        type: string
    type: object
  books.categoryResp:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  books.errorResponse:
    properties:
      message:
        type: string
    type: object
  books.listBooksResponse:
    properties:
      books:
        items:
          $ref: '#/definitions/books.bookResponse'
        type: array
    type: object
  categories.categoryItemResponse:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  categories.errorResponse:
    properties:
      message:
        type: string
    type: object
  categories.listCategoriesResponse:
    properties:
      categories:
        items:
          $ref: '#/definitions/categories.categoryItemResponse'
        type: array
    type: object
  users.createUserRequest:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  users.createUserResponse:
    properties:
      email:
        type: string
      id:
        type: integer
      password:
        type: string
      role:
        type: string
      username:
        type: string
    type: object
  users.errorResponse:
    properties:
      message:
        type: string
    type: object
  users.getUserByIDResponse:
    properties:
      city:
        type: string
      email:
        type: string
      id:
        type: integer
      role:
        type: string
      username:
        type: string
    type: object
  users.setCityRequest:
    properties:
      city:
        type: string
    type: object
host: bookers.kz
info:
  contact: {}
  description: bookers server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.htm
  termsOfService: http://swagger.io/terms/
  title: Swagger Bookers API
  version: "1.0"
paths:
  /admin/authors:
    post:
      consumes:
      - application/json
      description: Create author
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/admin.createAuthorRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/admin.errorResponse'
      summary: Create author
      tags:
      - admin
  /admin/authors/{id}:
    delete:
      consumes:
      - application/json
      description: Delete author
      parameters:
      - description: author ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/admin.errorResponse'
      summary: Delete author
      tags:
      - admin
  /admin/books:
    post:
      consumes:
      - application/json
      description: Create book
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/admin.createBookRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Success
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/admin.errorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/admin.errorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/admin.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/admin.errorResponse'
      summary: Create book
      tags:
      - admin
  /admin/categories:
    post:
      consumes:
      - application/json
      description: Create category
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/admin.createCategoryRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Success
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/admin.errorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/admin.errorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/admin.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/admin.errorResponse'
      summary: Create category
      tags:
      - admin
  /admin/categories/{id}:
    delete:
      consumes:
      - application/json
      description: Delete category
      parameters:
      - description: category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/admin.errorResponse'
      summary: Delete category
      tags:
      - admin
  /auth:
    post:
      consumes:
      - application/json
      description: Authenticate user
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.authRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/auth.authResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/auth.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/auth.errorResponse'
      summary: Authenticate user
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Refresh token
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.refreshRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/auth.authResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/auth.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/auth.errorResponse'
      summary: Refresh token
      tags:
      - auth
  /authors:
    get:
      consumes:
      - application/json
      description: List authors
      parameters:
      - description: Limit
        in: query
        name: limit
        required: true
        type: integer
      - description: Offset
        in: query
        name: offset
        required: true
        type: integer
      - description: Search
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/authors.listAuthorsResponse'
        "400":
          description: Invalid limit or offset
          schema:
            $ref: '#/definitions/authors.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/authors.errorResponse'
      summary: List authors
      tags:
      - authors
  /books:
    get:
      consumes:
      - application/json
      description: List books
      parameters:
      - description: Limit
        in: query
        name: limit
        required: true
        type: integer
      - description: Offset
        in: query
        name: offset
        required: true
        type: integer
      - description: Search
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/books.listBooksResponse'
        "400":
          description: Invalid limit or offset
          schema:
            $ref: '#/definitions/books.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/books.errorResponse'
      summary: List books
      tags:
      - books
  /books/{id}:
    get:
      consumes:
      - application/json
      description: Get book by ID
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/books.bookResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/books.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/books.errorResponse'
      summary: Get book by ID
      tags:
      - books
  /categories:
    get:
      consumes:
      - application/json
      description: List categories
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/categories.listCategoriesResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/categories.errorResponse'
      summary: List categories
      tags:
      - categories
  /users:
    post:
      consumes:
      - application/json
      description: Create user
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/users.createUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Success
          schema:
            $ref: '#/definitions/users.createUserResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/users.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/users.errorResponse'
      summary: Create user
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete user
      parameters:
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/users.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/users.errorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Get user by ID
      parameters:
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/users.getUserByIDResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/users.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/users.errorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get user by ID
      tags:
      - users
  /users/{id}/city:
    patch:
      consumes:
      - application/json
      description: Set city
      parameters:
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/users.setCityRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/users.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/users.errorResponse'
      security:
      - ApiKeyAuth: []
      summary: Set city
      tags:
      - users
swagger: "2.0"
